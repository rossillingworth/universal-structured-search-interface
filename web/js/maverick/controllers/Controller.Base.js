

CLASS.register({
    specification: {
        name: "ControllerBase"
    },
    childControllers: [], // references to child controllers, generated by Maverick
    domComponents: [], // references to topLevel components, generated by Maverick
    bindings: {}, // named references to template bindings, generated by Maverick
    /**
     * Iterates over template DOM
     * identifies and elments for binding (bind="name")
     * Adds named reference to this.bindings
     * @param templateDocumentFragment
     */
    attachTemplateBindings: function (templateDocumentFragment) {
        var nodes = templateDocumentFragment.querySelectorAll("*");
        for (var i = 0, len = nodes.length; i < len; i++) {
            if (nodes[i].hasAttribute("bind")) {
                var bindingName = nodes[i].getAttribute("bind");
                this.bindings[bindingName] = nodes[i];
            }
        }
    },
    checkExpectedBindingsAttached: function () {
        for (var n in this.bindings) {
            if (this.bindings.hasOwnProperty(n)) {
                EXCEPTION.when(!this.bindings[n], "Expected binding '%1' not found in %2.", n, this.specification.name);
            }
        }
    },
    /**
     * called after template & bindings have been processed
     */
    after: function () {
    },
    /**
     * delete all bindings and potential memory leaks
     */
    delete: function () {
        // todo - iterate bindings - remove all
        _.forEach(childControllers, function (child) {
            !!child.delete && child.delete()
        });
        _.forEach(domComponents, function (c) {
            c.parentNode.removeChild(c);
        });
    }
});

