

CLASS.register({
    specification: {
        name: "ControllerBase"
    },
    dataTag:null,
    targetElement:null,
    parentController:null,
    childControllers: [], // references to child controllers, generated by Maverick
    domComponents: [], // references to topLevel components, generated by Maverick
    bindings: {}, // named references to template bindings, generated by Maverick
    /**
     * Iterates over template DOM
     * identifies and elments for binding (bind="name")
     * Adds named reference to this.bindings
     * @param templateDocumentFragment
     */
    attachTemplateBindings: function (templateDocumentFragment) {
        var nodes = templateDocumentFragment.querySelectorAll("*");
        for (var i = 0, len = nodes.length; i < len; i++) {
            if (nodes[i].hasAttribute("bind")) {
                var bindingName = nodes[i].getAttribute("bind");
                this.bindings[bindingName] = nodes[i];
            }
        }
    },
    checkExpectedBindingsAttached: function () {
        for (var n in this.bindings) {
            if (this.bindings.hasOwnProperty(n)) {
                EXCEPTION.when(!this.bindings[n], "Expected binding '%1' not found in %2.", n, this.specification.name);
            }
        }
    },
    /**
     * called after template & bindings have been processed
     */
    after: function () {
    },
    /**
     * delete all bindings and potential memory leaks
     */
    delete: function () {
        // todo - iterate bindings - remove all
        this.deleteChildControllers();
        this.deleteBindings();
        this.deleteDomComponents();
    },
    deleteChildControllers:function deleteChildControllers(){
        while(this.childControllers.length > 0) {
            EXCEPTION.when(!this.childControllers[0].delete,"Child controller missing delete function");
            this.childControllers[0].delete();
            this.childControllers.slice(0,1);
        }
    },
    deleteBindings:function deleteBindings(){
        while(this.bindings.length > 0){
            var el = this.bindings[0][0];
            Maverick.Events.remove(el,undefined,undefined);
        }
    },
    deleteDomComponents:function deleteDomComponents(){
        _.forEach(this.domComponents, function (el) {
            el.parentNode.removeChild(el);
        });
    }
});

